{ "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [ {"tool": { "driver": {"name": "C/C++test","semanticVersion": "2024.2.0","rules": [{ "id": "BD-PB-NP", "name": "Avoid null pointer dereferencing", "shortDescription": { "text": "Avoid null pointer dereferencing" }, "fullDescription": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid null pointer dereferencing [BD-PB-NP]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-ARRAY", "name": "Avoid accessing arrays out of bounds", "shortDescription": { "text": "Avoid accessing arrays out of bounds" }, "fullDescription": { "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }, { "id": "BD-PB-CC", "name": "Avoid conditions that always evaluate to the same value", "shortDescription": { "text": "Avoid conditions that always evaluate to the same value" }, "fullDescription": { "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]" }, "defaultConfiguration": { "level": "error" }, "help": { "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]" }, "properties": { "tags": [ "Flow Analysis", "Possible Bugs" ] } }] } }, "results": [{ "ruleId": "BD-PB-NP", "level": "error", "message": { "text": "\"the_record\" may possibly be null", "markdown": "**\\[Line 49\\] \"the\\_record\" may possibly be null**  \n  \ntimer.c&nbsp;(40)&nbsp;:&nbsp;int start\\_h, start\\_m, end\\_h, end\\_m; \/\\* parasoft\\-suppress MISRAC2012\\-RULE\\_2\\_8\\-c \"per code review: won't fix\" \\*\/  \ntimer.c&nbsp;(41)&nbsp;:&nbsp;struct timer\\_record\\* the\\_record;  \ntimer.c&nbsp;(42)&nbsp;:&nbsp;time\\_t timer;  \ntimer.c&nbsp;(43)&nbsp;:&nbsp;struct tm\\* tm\\_tmp;  \ntimer.c&nbsp;(45)&nbsp;:&nbsp;timer = time\\(NULL\\);  \ntimer.c&nbsp;(46)&nbsp;:&nbsp;tm\\_tmp = localtime\\(&timer\\); \/\\* parasoft\\-suppress CERT\\_C\\-CON33\\-a \"per code review: won't fix\" \\*\/  \n**Source of null value**  \ntimer.c&nbsp;(48)&nbsp;:&nbsp;malloc\\(\\.\\.\\.\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: malloc\\(\\.\\.\\.\\)_  \ntimer.c&nbsp;(48)&nbsp;:&nbsp;the\\_record = \\(struct timer\\_record\\*\\)malloc\\(sizeof\\(struct timer\\_record\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: malloc\\(\\.\\.\\.\\) \\-> the\\_record_  \n**Null pointer dereferencing point**&nbsp;  \ntimer.c&nbsp;(49)&nbsp;:&nbsp;memset\\(the\\_record, 0, sizeof\\(struct timer\\_record\\)\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: the\\_record_" }, "partialFingerprints": { "lineHash": "1340052799" }, "locations": [ { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 49, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 40, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 41, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 42, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 43, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 45, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 46, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 48, "startColumn": 1 } }, "message": { "text": "Violation Cause - Source of null value  *** Null value carrier: malloc(...)" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 48, "startColumn": 1 } }, "message": { "text": "  *** Null value carrier: malloc(...) -> the_record" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 49, "startColumn": 1 } }, "message": { "text": "Violation Point - Null pointer dereferencing point  *** Null value carrier: the_record" } }, "nestingLevel": 0 } ] } ] } ] }, { "ruleId": "BD-PB-ARRAY", "level": "error", "message": { "text": "Possibly accessing array \"timer_records\" out of bounds at index -1. Correct index(es): [0...99]", "markdown": "**\\[Line 116\\] Possibly accessing array \"timer\\_records\" out of bounds at index \\-1\\. Correct index\\(es\\): \\[0\\.\\.\\.99\\]**  \n  \n**Start of the path**  \ntimer.c&nbsp;(25)&nbsp;:&nbsp;void uninit\\_timer\\(\\)  \ntimer.c&nbsp;(28)&nbsp;:&nbsp;int i;  \ntimer.c&nbsp;(30)&nbsp;:&nbsp;for \\(i = 0; i < max\\_records; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < 100\\) \\(true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \ntimer.c&nbsp;(31)&nbsp;:&nbsp;delete\\_timer\\_record\\(i\\);  \n        timer.c&nbsp;(110)&nbsp;:&nbsp;struct timer\\_record\\* tr = timer\\_records\\[idx\\];  \n        timer.c&nbsp;(111)&nbsp;:&nbsp;int i;  \n        timer.c&nbsp;(114)&nbsp;:&nbsp;for \\(i = idx\\-1; i < curr\\_index; i\\+\\+\\)&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < curr\\_index\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \n        **Out of bounds access point**&nbsp;  \n        timer.c&nbsp;(116)&nbsp;:&nbsp;if \\(0 == timer\\_records\\[i\\]\\) \\{" }, "partialFingerprints": { "lineHash": "1747357394" }, "locations": [ { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 116, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 25, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 28, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 30, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < 100) (true)  *** Entering the loop" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 31, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 110, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 111, "startColumn": 1 } } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 114, "startColumn": 1 } }, "message": { "text": "  *** Loop condition evaluation: (i < curr_index) (assuming true)  *** Entering the loop" } }, "nestingLevel": 1 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 116, "startColumn": 1 } }, "message": { "text": "Violation Point - Out of bounds access point" } }, "nestingLevel": 1 } ] } ] } ] }, { "ruleId": "BD-PB-CC", "level": "error", "message": { "text": "Condition \"tr\" always evaluates to true", "markdown": "**\\[Line 136\\] Condition \"tr\" always evaluates to true**  \n  \n**Start of the path**  \ntimer.c&nbsp;(126)&nbsp;:&nbsp;void format\\_timer\\_record\\(int idx, char\\* buf\\)  \ntimer.c&nbsp;(128)&nbsp;:&nbsp;char start\\[BUF\\_SIZE\\];  \ntimer.c&nbsp;(129)&nbsp;:&nbsp;char end\\[BUF\\_SIZE\\];  \ntimer.c&nbsp;(131)&nbsp;:&nbsp;struct timer\\_record\\* tr = timer\\_records\\[idx\\];  \ntimer.c&nbsp;(133)&nbsp;:&nbsp;strftime\\(start, BUF\\_SIZE, \"%I:%M %p\", localtime\\(&tr\\->starttime\\)\\); \/\\* parasoft\\-suppress CERT\\_C\\-CON33\\-a \"per code review: won't fix\" \\*\/  \ntimer.c&nbsp;(134)&nbsp;:&nbsp;strftime\\(end, BUF\\_SIZE, \"%I:%M %p\", localtime\\(&tr\\->endtime\\)\\); \/\\* parasoft\\-suppress CERT\\_C\\-CON33\\-a \"per code review: won't fix\" \\*\/  \n**Point where senseless condition is used**&nbsp;  \ntimer.c&nbsp;(136)&nbsp;:&nbsp;if \\(tr\\) \\{" }, "partialFingerprints": { "lineHash": "130267201" }, "locations": [ { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 136, "startColumn": 1 } } } ], "codeFlows": [ { "threadFlows": [ { "locations": [ { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 126, "startColumn": 1 } }, "message": { "text": "Violation Cause - Start of the path" } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 128, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 129, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 131, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 133, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 134, "startColumn": 1 } } }, "nestingLevel": 0 }, { "location": { "physicalLocation": { "artifactLocation": { "uri": "file:/home/gtrofimov/examples/Timer/timer.c" }, "region": { "startLine": 136, "startColumn": 1 } }, "message": { "text": "Violation Point - Point where senseless condition is used" } }, "nestingLevel": 0 } ] } ] } ] }] } ] }